# coding=utf-8
m4_changequote(<!,!>)

"""
@file kmeans.py_in

@brief k-Means: Driver functions

@namespace kmeans

@brief k-Means: Driver functions
"""

import plpy

from utilities.control import IterationController

def compute_kmeanspp_seeding(schema_madlib, rel_args, rel_state, rel_source,
    expr_point, **kwargs):
    """
    Driver function for k-Means++ seeding

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param expr_point Expression containing the point coordinates
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """
    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "DOUBLE PRECISION[][]",
        truncAfterIteration = True,
        schema_madlib = schema_madlib, # Identifiers start here
        rel_source = rel_source,
        expr_point = expr_point)
    with iterationCtrl as it:
        if it.test("_args.initial_centroids IS NULL"):
            it.update("""
                SELECT
                    ARRAY[{schema_madlib}.weighted_sample(_src.{expr_point}::FLOAT8[], 1)]
                FROM {rel_source} AS _src
                """)
        else:
            it.update("""
                SELECT _args.initial_centroids FROM {rel_args} AS _args
                """)
        while it.test("array_upper(_state._state, 1) < _args.k"):
            it.update("""
                SELECT
                    (
                        SELECT _state FROM {rel_state}
                        WHERE _iteration = {iteration}
                    ) || {schema_madlib}.weighted_sample(
                            _src.{expr_point}::FLOAT8[],
                            ({schema_madlib}.closest_column(
                                (
                                    SELECT _state FROM {rel_state}
                                    WHERE _iteration = {iteration}
                                ),
                                _src.{expr_point}::FLOAT8[],
                                (SELECT fn_dist FROM {rel_args})
                            )).distance
                        )
                FROM {rel_source} AS _src
                """)
    return iterationCtrl.iteration

def compute_kmeans_random_seeding(schema_madlib, rel_args, rel_state,
    rel_source, expr_point, **kwargs):
    """
    Driver function for k-Means random seeding

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param expr_point Expression containing the point coordinates
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """
    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "DOUBLE PRECISION[][]",
        truncAfterIteration = True,
        schema_madlib = schema_madlib, # Identifiers start here
        rel_source = rel_source,
        expr_point = expr_point)
    with iterationCtrl as it:
        it.update("""
            SELECT _args.initial_centroids FROM {rel_args} AS _args
            """)
        m = it.evaluate("_args.k - coalesce(array_upper(_state._state, 1), 0)")
        while m > 0:
            it.update("""
                SELECT
                    _state._state || {schema_madlib}.matrix_agg(_point::FLOAT8[])
                FROM (
                        SELECT
                            {expr_point} AS _point
                        FROM
                            {rel_source} AS _src
                        WHERE
                            random() < CAST(
                                ({m} + 14 + sqrt(196 + 28 * {m}))
                                / (SELECT count(*) FROM {rel_source})
                                AS DOUBLE PRECISION
                            )
                        ORDER BY random()
                        LIMIT {m}
                    ) AS _src,
                    {rel_state} AS _state
                WHERE
                    _state._iteration = {iteration}
                GROUP BY
                    _state._state
                """, m = m)
            m = it.evaluate("_args.k - coalesce(array_upper(_state._state, 1), 0)")
    return iterationCtrl.iteration

def compute_kmeans(schema_madlib, rel_args, rel_state, rel_source,
    expr_point, agg_centroid, **kwargs):
    """
    Driver function for Lloyd's k-means local-search heuristic

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param expr_point Expression containing the point coordinates
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """

    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "{schema_madlib}.kmeans_state",
        truncAfterIteration = False,
        schema_madlib = schema_madlib,
        rel_source = rel_source,
        expr_point = expr_point,
        agg_centroid = agg_centroid)
    with iterationCtrl as it:
        # Create the initial inter-iteration state of type kmeans_state
        it.update("""
            SELECT
                CAST((_args.initial_centroids, NULL, 'Inf', 1.0) AS
                    {schema_madlib}.kmeans_state)
            FROM {rel_args} AS _args
            """)
        while it.test("""
            {iteration} < _args.max_num_iterations AND
            (_state._state).frac_reassigned > _args.min_frac_reassigned
            """):
            it.update("""
                SELECT
                    CAST((
                        {schema_madlib}.matrix_agg(_centroid::FLOAT8[]),
m4_ifdef(<!__GREENPLUM__!>,<!m4_ifdef(<!__HAS_ORDERED_AGGREGATES__!>,,<!
                        {schema_madlib}.
!>)!>)
                        array_agg(_new_centroid_id),
                        sum(_objective_fn),
                        CAST(sum(_num_reassigned) AS DOUBLE PRECISION)
                            / sum(_num_points)
                    ) AS {schema_madlib}.kmeans_state)
                FROM (
                    SELECT
                        (_new_centroid).column_id AS _new_centroid_id,
                        sum((_new_centroid).distance) AS _objective_fn,
                        count(*) AS _num_points,
                        sum(
                            CAST(
                                coalesce(
                                    (CAST((
                                        SELECT (_state).old_centroid_ids
                                        FROM {rel_state}
                                        WHERE _iteration = {iteration})
                                    AS INTEGER[]))[
                                        (_new_centroid).column_id + 1
                                    ] != _old_centroid_id,
                                    TRUE
                                )
                                AS INTEGER
                            )
                        ) AS _num_reassigned,
                        {agg_centroid}(_point::FLOAT8[]) AS _centroid
                    FROM (
                        SELECT
                            -- PostgreSQL/Greenplum tuning:
                            -- VOLATILE function as optimization fence
                            {schema_madlib}.noop(),
                            _src.{expr_point} AS _point,
                            {schema_madlib}.closest_column(
                                (
                                    SELECT (_state).centroids FROM {rel_state}
                                    WHERE _iteration = {iteration}
                                ),
                                _src.{expr_point}::FLOAT8[],
                                (SELECT fn_dist FROM {rel_args})
                            ) AS _new_centroid,
                            ({schema_madlib}.closest_column(
                                (
                                    SELECT (_state).centroids FROM {rel_state}
                                    WHERE _iteration = {iteration} - 1
                                ),
                                _src.{expr_point}::FLOAT8[],
                                (SELECT fn_dist FROM {rel_args})
                            )).column_id AS _old_centroid_id
                        FROM {rel_source} AS _src
                    ) AS _points_with_assignments
                    GROUP BY (_new_centroid).column_id
                ) AS _new_centroids
                """)

            if it.test(
                "array_upper((_state._state).centroids, 1) < _args.k"):
                it.update("""
                    SELECT
                        CAST(((
                                SELECT (_state).centroids FROM {rel_state}
                                WHERE _iteration = {iteration}
                            ) || {schema_madlib}.kmeanspp_seeding(
                                '{rel_source}',
                                '{expr_point}',
                                (SELECT CAST(k AS INTEGER) FROM {rel_args}),
                                textin(regprocout(
                                    (SELECT fn_dist FROM {rel_args})
                                )),
                                (
                                    SELECT (_state).centroids FROM {rel_state}
                                    WHERE _iteration = {iteration}
                                )
                            ),
                            (
                                SELECT (_state).old_centroid_ids
                                FROM {rel_state}
                                WHERE _iteration = {iteration}
                            ),
                            'Inf',
                            1.0
                        ) AS {schema_madlib}.kmeans_state)
                    """)
    return iterationCtrl.iteration

m4_changequote(<!`!>,<!'!>)
