/* ----------------------------------------------------------------------- *//**
 *
 * @file correlation.sql_in
 *
 * @brief SQL functions for correlation computation
 * @date April 2013
 *
 * @sa For a brief introduction to correlation, see the
 *     module description \ref grp_correlation
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')


/**
@addtogroup grp_correlation

<div class="toc"><b>Contents</b>
<ul>
<li><a href="#usage">Correlation Function</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#seealso">See Also</a></li>
</ul>
</div>

@brief Generates a cross-correlation matrix for all pairs of numeric columns in a table.

A correlation function is the degree and direction of association of two
variables&mdash;how well one random variable can be predicted from the other. The
coefficient of correlation varies from -1 to 1. A coefficient of 1 implies perfect
correlation, 0 means no correlation, and -1 means perfect anti-correlation.

This function provides a cross-correlation matrix for all pairs of numeric
columns in a <em>source_table</em>. A correlation matrix describes correlation
among \f$ M \f$ variables. It is a square symmetrical \f$ M \f$x \f$M \f$ matrix
with the \f$ (ij) \f$th element equal to the correlation coefficient between the
\f$i\f$th and the \f$j\f$th variable. The diagonal elements (correlations of
variables with themselves) are always equal to 1.0.

@anchor usage
@par Correlation Function

The correlation function has the following syntax:
<pre class="syntax">
correlation( source_table, 
             output_table, 
             target_cols
           )
</pre>
<dl class="arglist">
<dt>source_table</dt>
<dd>TEXT. The name of the data containing the input data.</dd>
<dt>output_table</dt>
<dd>TEXT. The name of the table where the cross-correlation matrix will be saved. The output is a table with N+2 columns and N rows, where N is the number of
target columns. It contains the following columns.
<table class="output">
<tr>
<th>column_position</th>
<td>The first column contains the position of the variable in the '<em>source_table</em>'.</td>
</tr>
<tr>
<th>variable</th>
<td>The second column contains the row-header for the variables.</td>
</tr>
<tr>
<th>remaining columns</th>
<td>The remainder of the table is the NxN correlation matrix for the pairs of
numeric '<em>source_table</em>' columns.</td>
</tr>  
</table>
The output table is arranged as a lower-triangular matrix with the upper
triangle set to NULL and the diagonal elements set to 1.0. To obtain the result
from the '<em>output_table</em>' in this matrix format ensure to order the
elements using the '<em>column_position</em>', as shown in the example below.
<pre class="example">
SELECT * FROM output_table ORDER BY column_position;
</pre>
</dd>
<dt>target_cols (optional)</dt>
<dd>TEXT, default: '*'. A comma-separated list of the columns to correlate. If NULL or <tt>'*'</tt>, results are produced for all numeric columns.</dd>
</dl>
  

@anchor examples
@examp

-# View online help for the correlation function.
<pre class="example">
SELECT madlib.correlation();
</pre>

-# Create an input data set. 
<pre class="example">
DROP TABLE IF EXISTS example_data;
CREATE TABLE example_data(
    id SERIAL, outlook TEXT,
    temperature FLOAT8, humidity FLOAT8,
    windy TEXT, class TEXT);
COPY example_data FROM STDIN WITH DELIMITER '|';
  1 | sunny    |          85 |       85 | false | Don't Play
  2 | sunny    |          80 |       90 | true  | Don't Play
  3 | overcast |          83 |       78 | false | Play
  4 | rain     |          70 |       96 | false | Play
  5 | rain     |          68 |       80 | false | Play
  6 | rain     |          65 |       70 | true  | Don't Play
  7 | overcast |          64 |       65 | true  | Play
  8 | sunny    |          72 |       95 | false | Don't Play
  9 | sunny    |          69 |       70 | false | Play
 10 | rain     |          75 |       80 | false | Play
 11 | sunny    |          75 |       70 | true  | Play
 12 | overcast |          72 |       90 | true  | Play
 13 | overcast |          81 |       75 | false | Play
 14 | rain     |          71 |       80 | true  | Don't Play
 15 |          |         100 |      100 | true  |  
 16 |          |         110 |      100 | true  | 
\\.
</pre>

-# Run the correlation() function on the data set.
<pre class="example">
-- Correlate all numeric columns
SELECT madlib.correlation( 'example_data', 
                           'example_data_output'
                         );
-- Setting target_cols to NULL or '*' also correlates all numeric columns  
SELECT madlib.correlation( 'example_data', 
                           'example_data_output', 
                           '*'
                         );
-- Correlate only the temperature and humidity columns 
SELECT madlib.correlation( 'example_data', 
                           'example_data_output', 
                           'temperature, humidity'
                         );
</pre>

-# View the correlation matrix.
<pre class="example">
SELECT * FROM example_data_output ORDER BY column_position;
</pre>
Result:
<pre class="result">
 column_position |  variable   |    temperature    | humidity 
-----------------+-------------+-------------------+----------
               1 | temperature |                 1 |         
               2 | humidity    | 0.616876934548786 |      1.0
(2 rows)
</pre>

@anchor related
@par Related Topics

File correlation.sql_in documenting the SQL functions

\ref grp_summary for general descriptive statistics for a table

*/

DROP TYPE IF EXISTS MADLIB_SCHEMA.correlation_result;
CREATE TYPE MADLIB_SCHEMA.correlation_result AS
(
    output_table      	TEXT,
    row_count       	INT4,
    duration        	FLOAT8
);

-----------------------------------------------------------------------
-- Main function for correlation
-----------------------------------------------------------------------
/* @brief Compute a correlation matrix for a table with optional target columns specified

   @param source_table      Name of source relation containing the data
   @param output_table      Name of output table name to store the correlation
   @param target_cols       String with comma separated list of columns for which cross-correlation is desired

   @usage
   <pre> SELECT MADLIB_SCHEMA.correlation (
         '<em>source_table</em>', '<em>output_table</em>',
         '<em>target_cols</em>'
     );
     SELECT * FROM '<em>output_table</em>' order by '<em>colum_position</em>';
   </pre>
*/
CREATE FUNCTION MADLIB_SCHEMA.correlation(
    source_table 		VARCHAR,		-- input table name
    output_table 		VARCHAR,		-- output table name
    target_cols 		VARCHAR 		-- comma separated list of output cols
                                        -- (default = '*')
)
RETURNS MADLIB_SCHEMA.correlation_result AS $$
    PythonFunctionBodyOnly(`stats', `correlation')
    return correlation.correlation(schema_madlib, source_table, output_table, target_cols)
$$ LANGUAGE plpythonu VOLATILE;

-----------------------------------------------------------------------
-- Overloaded function
-----------------------------------------------------------------------
CREATE FUNCTION MADLIB_SCHEMA.correlation(
    source_table 		VARCHAR,		-- input table name
    output_table 		VARCHAR		-- output table name
)
RETURNS MADLIB_SCHEMA.correlation_result AS $$
	select MADLIB_SCHEMA.correlation($1, $2, NULL)
$$ LANGUAGE sql;

-----------------------------------------------------------------------
-- Help functions
-----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.correlation(
    input_message       TEXT
)
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`stats', `correlation')
    return correlation.correlation_help_message(schema_madlib, input_message)
$$ LANGUAGE plpythonu;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.correlation()
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`stats', `correlation')
    return correlation.correlation_help_message(schema_madlib, None)
$$ LANGUAGE plpythonu;
-------------------------------------------------------------------------
